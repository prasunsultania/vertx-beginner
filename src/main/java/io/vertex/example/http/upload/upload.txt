package io.vertex.example.http.upload;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.FileProps;
import io.vertx.core.file.FileSystem;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.http.HttpClientOptions;
import io.vertx.core.http.HttpClientRequest;
import io.vertx.core.streams.Pump;
import io.vertex.example.util.Runner;

/*
 * @author <a href="http://tfox.org">Tim Fox</a>
 */
public class Client extends AbstractVerticle {

  // Convenience method so you can run it in your IDE
  public static void main(String[] args) {
    Runner.runExample(Client.class);
  }

  @Override
  public void start() throws Exception {
    HttpClientRequest req = vertx.createHttpClient(new HttpClientOptions()).put(8080, "localhost", "/someurl", resp -> {
      System.out.println("Response " + resp.statusCode());
    });
    String filename = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/upload.txt";
    FileSystem fs = vertx.fileSystem();

    fs.props(filename, ares -> {
      FileProps props = ares.result();
      System.out.println("props is " + props);
      long size = props.size();
      req.headers().set("content-length", String.valueOf(size));
      fs.open(filename, new OpenOptions(), ares2 -> {
        AsyncFile file = ares2.result();
        Pump pump = Pump.pump(file, req);
        file.endHandler(v -> {
          req.end();
        });
        pump.start();
      });
    });


  }
}package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
package io.vertex.example.http.upload;

import java.util.UUID;

import io.vertex.example.util.Runner;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.OpenOptions;
import io.vertx.core.streams.Pump;

public class Server extends AbstractVerticle {

	// Convenience method so you can run it in your IDE
	public static void main(String[] args) {
		Runner.runExample(Server.class);
	}

	final String FILE_LOCATIONS = "/Users/prasunsultania/Documents/workspace/vertex/experimental/maven-core/src/main/java/io/vertex/example/http/upload/uploadeddata";

	@Override
	public void start() {
		vertx.createHttpServer().requestHandler(request -> {
			request.pause();
			String fileName = FILE_LOCATIONS + UUID.randomUUID() + ".uploaded";

			vertx.fileSystem().open(fileName, new OpenOptions(), ares -> {
				
				if(ares.failed()){
					//TODO handle failure
					request.response().setStatusCode(500).end();
					return;
				} 
				
				//get result of opening file system
				AsyncFile file = ares.result();
				
				//pump will handle back pressure??
				Pump pump = Pump.pump(request, file);
				
				//On responde end close the file
				request.endHandler(v1->{
					file.close(v2 -> {
						if(v2.failed()){
							System.out.println("File close failed :" + 
									v2.cause().getMessage());
							request.response().setStatusCode(500).end();
						} else {
							System.out.println("Uploaded to : " + fileName);
							request.response().end();
						}
					});
				});
				
				//initiate pumping (stream pipe)
				pump.start();
				request.resume();
				
			});
		}).listen(8080);
	}
}
